name: Deploy

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled

env:
  IMAGE_ORG: fiware
  IMAGE_NAME: orion-ld
  IMAGE_TAG_DEBUG: debug
  IMAGE_TAG_PRE: PRE-${{ github.run_number }}

concurrency: ci-${{ github.ref }}

jobs:

  # generate pre-release version, based on the last release
  generate-version:

    if: github.event.pull_request.user.name != 'github-actions[bot]'

    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.out.outputs.version }}

    steps:

      - name: Get latest Github release
        id: latest-release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          exclude_types: draft|prerelease

      - name: Set version output
        id: out
        run: echo "::set-output name=version::$(echo ${{ steps.latest-release.outputs.tag_name }}-${{ env.IMAGE_TAG_PRE }})"

  prepare-release:
    needs: [ "generate-version" ]
    runs-on: ubuntu-18.04

    outputs:
      release-notes: ${{ steps.release-notes.outputs.notes }}

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - name: set version in header file
        run: |
          cd src/lib/orionld/common/
          sed -i '/#define ORIONLD_VERSION/s/.*/#define ORIONLD_VERSION ${{ needs.generate-version.outputs.version }}/' orionldState.h

      - name: Commit & Push changes
        uses: actions-js/push@v1.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.pull_request.head.ref }}


  # push to dockerhub
  deploy-release-dockerhub:
    needs: [ "generate-version", "prepare-release" ]

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: |
#            ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
#          file: docker/Dockerfile-ubi
#          no-cache: true
#
#      - name: Build and push with gdb
#        id: docker_build_gdb
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: |
#            ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}-GDB
#          build-args: |
#            BASE_VERSION=${{ needs.generate-version.outputs.version }}
#          file: docker/Dockerfile-gdb
#          no-cache: true

#
#      - name: Run Snyk to check Docker image for vulnerabilities
#        uses: snyk/actions/docker@master
#        continue-on-error: true
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        with:
#          image: ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
#          args: --file=docker/Dockerfile-ubi
#
#      - name: Upload result to GitHub Code Scanning
#        uses: github/codeql-action/upload-sarif@v1
#        with:
#          sarif_file: snyk.sarif

  deploy-debug-dockerhub:
    needs: [ "generate-version", "prepare-release" ]

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1

#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}-${{ env.IMAGE_TAG_DEBUG }}
#          file: docker/Dockerfile-debug
#          no-cache: true

  # quay.io
  deploy-release-quay:
    needs: [ "generate-version", "prepare-release" ]

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

#      - name: Build Image
#        id: build-image
#        uses: redhat-actions/buildah-build@v2
#        with:
#          image: ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}
#          oci: true
#          tags: ${{ needs.generate-version.outputs.version }} ${{ github.sha }}
#          dockerfiles: |
#            ./docker/Dockerfile-ubi
#
#      - name: Push To quay.io
#        id: push-to-quay
#        uses: redhat-actions/push-to-registry@v2
#        with:
#          image: ${{ steps.build-image.outputs.image }}
#          tags: ${{ steps.build-image.outputs.tags }}
#          registry: quay.io
#          username: ${{ secrets.QUAY_USERNAME }}
#          password: ${{ secrets.QUAY_PASSWORD }}
#
#      - name: Build with gdb
#        id: build-image-gdb
#        uses: redhat-actions/buildah-build@v2
#        with:
#          image: ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}
#          tags: ${{ needs.generate-version.outputs.version }}-GDB
#          oci: true
#          dockerfiles: |
#            ./docker/Dockerfile-gdb
#          build-args: |
#            BASE_VERSION=${{ env.IMAGE_TAG_PRE }}
#
#      - name: Push To quay.io
#        id: push-gdb-to-quay
#        uses: redhat-actions/push-to-registry@v2
#        with:
#          image: ${{ steps.build-image-gdb.outputs.image }}
#          tags: ${{ steps.build-image-gdb.outputs.tags }}
#          registry: quay.io
#          username: ${{ secrets.QUAY_USERNAME }}
#          password: ${{ secrets.QUAY_PASSWORD }}


  deploy-debug-quay:
    needs: [ "generate-version", "prepare-release" ]

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

#      - name: Build Image
#        id: build-image
#        uses: redhat-actions/buildah-build@v2
#        with:
#          image: ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}
#          tags: ${{ needs.generate-version.outputs.version }}-${{ env.IMAGE_TAG_DEBUG }}
#          oci: true
#          dockerfiles: |
#            ./docker/Dockerfile-debug
#
#      - name: Push To quay.io
#        id: push-debug-to-quay
#        uses: redhat-actions/push-to-registry@v2
#        with:
#          image: ${{ steps.build-image.outputs.image }}
#          tags: ${{ steps.build-image.outputs.tags }}
#          registry: quay.io
#          username: ${{ secrets.QUAY_USERNAME }}
#          password: ${{ secrets.QUAY_PASSWORD }}


  github-pre-release:
    needs: [ "generate-version", "prepare-release", "deploy-debug-quay", "deploy-release-quay", "deploy-debug-dockerhub", "deploy-release-dockerhub"]
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: "softprops/action-gh-release@v0.1.14"
        with:
          tag_name: ${{ needs.generate-version.outputs.version }}
          name: ${{ needs.generate-version.outputs.version }}
          prerelease: true
          body: ${{ github.event.pull_request.body }}