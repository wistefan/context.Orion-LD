name: Deploy Releases

on:
  push:
    branches:
      -  'releases'

env:
  IMAGE_ORG: fiware
  IMAGE_NAME: orion-ld

concurrency: ci-${{ github.ref }}

jobs:


  # generate version, based on the last pr
  generate-version:

    if: github.event.pull_request.user.name != 'github-actions[bot]'

    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.out.outputs.version }}

    steps:

      - uses: actions/checkout@v2

      - id: pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: zwaldowski/semver-release-action@v2
        with:
          dry_run: true
          bump: ${{ steps.pr.outputs.labels }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version output
        id: out
        run: echo "::set-output name=version::$(echo ${VERSION})"

  prepare-release:
    needs: [ "generate-version" ]
    runs-on: ubuntu-18.04

    outputs:
      release-notes: ${{ steps.release-notes.outputs.notes }}

    steps:

      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.

      - name: set version in header file
        run: |
          cd src/lib/orionld/common/
          sed -i '/#define ORIONLD_VERSION/s/.*/#define ORIONLD_VERSION ${{ needs.generate-version.outputs.version }}/' orionldState.h

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy-release-quay:
    needs: [ "generate-version", "prepare-release" ] 
    runs-on: ubuntu-18.04

    steps:

      - uses: actions/checkout@v2

#      - name: Build Image
#        id: build-image
#        uses: redhat-actions/buildah-build@v2
#        with:
#          image: ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}
#          tags: ${{ needs.generate-version.outputs.version }} ${{ github.sha }}
#          dockerfiles: |
#            ./docker/Dockerfile-ubi
#
#      - name: Push To quay.io
#        id: push-to-quay
#        uses: redhat-actions/push-to-registry@v2
#        with:
#          image: ${{ steps.build-image.outputs.image }}
#          tags: ${{ steps.build-image.outputs.tags }}
#          registry: quay.io
#          username: ${{ secrets.QUAY_USERNAME }}
#          password: ${{ secrets.QUAY_PASSWORD }}

  deploy-release-dockerhub:
    needs: [ "generate-version", "prepare-release" ]
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - name: Build
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: |
#            ${{ env.IMAGE_ORG }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
#          file: docker/Dockerfile-ubi
#          no-cache: true


#  deploy-to-global-instance:
#    needs: [ "deploy-release-dockerhub" ]
#    runs-on: ubuntu-18.04
#
#    steps:
#      - name: Deploy
#        uses: fjogeleit/http-request-action@master
#        with:
#          url: ${{ secrets.CD_URL_TRIGGER }}
#          method: 'GET'
#          bearerToken: ${{ secrets.CD_TOKEN }}

  github-release:
    needs: [ "generate-version", "prepare-release", "deploy-release-dockerhub", "deploy-release-quay"]
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: get last pr
        id: pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: read release notes
        id: release-notes
        run: |
          echo "Release notes are: ${{ steps.pr.outputs.body }}"

      - uses: "softprops/action-gh-release@v0.1.14"
        with:
          tag_name: ${{ needs.generate-version.outputs.version }}
          name: ${{ needs.generate-version.outputs.version }}
          prerelease: false
          body: ${{ steps.pr.outputs.body }}